####################
# About this tutorial
####################

# This is a tutorial on using Docker aimed at R Users

####################
# Simple start with hello-world
####################

# hello world!
docker run hello-world

# what's going on?  Difference between VM and Container is that Container much more lightweight so smaller and quicker to instatiate
open https://docs.docker.com/get-started/#containers-and-virtual-machines

####################
# Run a container based on a centos image
####################

# start the container
docker run -it --name='test_centos' centos
ls
hostname
uname -a

# IN NEW TERMINAL - check on docker process
docker ps

# back to container - create a file
touch phil.txt
ls
exit

# container has stopped:
docker ps

# see with docker ps -a
docker ps -a

# restart it
docker start test_centos

# check it
docker ps

# get back into it with docker exec
docker exec -it test_centos bash

# check that phil.txt is present
ls

# then exit, container is still running
exit
docker ps

# stop and remove the container
docker stop test_centos
docker ps -a
docker rm test_centos
docker ps -a

######################
# Make another centos image - a different instance but same container!
######################

# make the container - use --rm parameter to automatically delete on exit
docker run -it --rm --name=centos_test2 centos

# is phil.txt there?
ls

# NO!  This is a new instance remember...

# in Terminal 2 check container is running
docker ps

# in Terminal 1 exit and check it has been removed
exit
docker ps -a

#################
# Working with R
#################

# start a container from an image with R installed
docker run -it --rm phil-r
R
q()
exit

# straight into r by setting entrypoint
docker run -it --rm --entrypoint R phil-r
q()

### first use case for Docker for R users: running different versions of R!

# Would be nice to have some data:
docker run -it --rm -v ~/Documents:/localdata phil-r
ls
ls localdata
exit

# Then install a package - lattice
docker run -it --rm phil-r
R
install.packages('lattice')
library(lattice)

# Now try xml2
install.packages('xml2', Ncpus=parallel::detectCores())

# fails because we're missing a system dep - install this
q()
apt-get update
apt-get install libxml2-dev

# now try again - success!
R
install.packages('xml2', Ncpus=parallel::detectCores())
library(xml2)
q()
exit

######################
# Dockerfiles
######################

# Dockerfiles let us put in code the instructions for creating an image - reproducible!

# phil-r2
# change entrypoint to R so we don't have to do it in the docker run command
cd phil-r2
docker build . --tag='phil-r2'
docker run -it --rm phil-r2
q()

# phil-r3
# install lattice
cd ../phil-r3
docker build . --tag='phil-r3'
docker run -it --rm phil-r3
library(lattice)
q()

# phil-r4
# install xml2 and its system dependencies
cd ../phil-r4
docker build . --tag='phil-r4'
docker run -it --rm phil-r4
library(xml2)
q()

#############
# Makefiles can be useful to control docker commands
#############

# see Makefile contents
more Makefile

# how to use make
make

# use make run to run the image
make run
q()

# use make run-data to run the image connected to local filesystem
make run-data
list.files('/localdata/')
q()

#########################
# Don't need to reinvent the wheel - DockerHub rocker
#########################

# Someone's done this before - look at rocker - different r versions
open https://hub.docker.com/u/rocker/

# pull down the image and run
docker pull rocker/r-ver:3.3.1
docker run --rm -it rocker/r-ver:3.3.1
sessionInfo()
rownames(installed.packages())
q()

#####################
# This is where it gets really cool...
#####################

docker run -d -p 8787:8787 --name='rstudio-demo' rocker/rstudio
open http://localhost:8787/

# What is this?!  Now the container is run in detatched mode (-d) and we connect port 8787 on the host to port 8787 on the container.
# The image serves RStudio Server Community Edition so we can run RStudio in a browser rather than using R on the terminal.

# Look at the running container
docker ps

# use docker exec to open a bash session inside the container (as root)
docker exec -it rstudio-demo bash

# go to the rstudio home directory
cd /home/rstudio

# then create a file in RStudio
# and view it in the shell
ls

# tidy up
exit
docker stop rstudio-demo
docker rm rstudio-demo

######################
# Summing up
#####################

# Why is all of this useful?
# - easily use different versions of R
# - codify difficult package installs
# - have different environments for different projects
# - host the same environment in different place - laptops of project team members, local compute cluster, AWS, Azure etc.
# - most importantly - robustness: re-run code on the exact same environment when you return to a project

####################
# Extras
####################

# Self-auditing Docker images
# - see blog post and git repo for details:
open https://chapmandu2.github.io/post/2018/05/26/reproducible-data-science-environments-with-docker/

# - easier if you start from a rocker image (I needed centos so had to start from scratch)
# - Makefiles useful as they allow version control of docker build commands

# Show end product ie NLP Docker container (this bit won't work from the git repo, sorry)
docker start rstan-demo
open http://localhost:8787/ #rstudio
open http://localhost:3838/users/rstudio/ #shiny

# demo the following
# - versioning and auditing
# - shiny and rstudio server in one Docker image
# - change the shiny app and immediately see changes
# - great for analysis and publishing in same environment - since it's a Docker container can host it anywhere...

docker stop rstan-demo
